name: "Terraform"

on:
  push:
#    branches:
#      - staging
#    paths:
#      - "**.tf"

jobs:
  terraform:
    name: "Terraform"
    defaults:
      run:
        working-directory: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     # terraform_version: 0.13.0:
      #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

#      - name: Terraform Plan
#        id: plan
#        if: github.event_name == 'pull_request'
#        run: terraform plan -no-color
#        continue-on-error: true
#
#      - uses: actions/github-script@0.9.0
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
      # -
      #   name: Terraform Apply
      #   if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
      #   run: terraform apply -auto-approve
      -
        name: Send slack when failed
        if: ${{ failure() }}
        uses: ./.github/actions/slack-notify
        with:
          slack_incoming_url: ${{ secrets.SLACK_NOTIFY_GH_ACTIONS }}
      -
        name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  jenkins:
    runs-on: ubuntu-latest
    needs: terraform
    if: ${{ contains( github.event.head_commit.message, 'run jenkins') }}
    steps:
      -
        name: trigger jenkins Job
        shell: bash
        run: |
          WEBHOOK=${{ secrets.JENKINS_WEBHOOK_URL }}
          TOKEN=${{ secrets.JENKINS_API_TOKEN }}

          curl -X POST -u "admin:${TOKEN}" "${WEBHOOK}job/fiber/buildWithParameters?BUILD_DOCKER_IMAGE=true&RUN_TEST=true&PUSH_DOCKER_IMAGE=true"
